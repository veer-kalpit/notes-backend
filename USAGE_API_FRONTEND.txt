# Notes Backend API Usage Guide

This guide explains how to use the Notes Backend API from your frontend application. All endpoints require authentication using a JWT token, which you receive after logging in or registering.


## Authentication
- Register: `POST /api/auth/register`
- Login (Password or OTP): `POST /api/auth/login`
- Request OTP: `POST /api/auth/request-otp`
- The JWT token is set as an HTTP-only cookie or can be sent as a Bearer token in the `Authorization` header for each request.

### Request OTP for Login
```
POST /api/auth/request-otp
Body: { "email": "user@example.com" }
```
**Response:**
```
{
  "success": true,
  "message": "OTP sent to email"
}
```

### Login with OTP
```
POST /api/auth/login
Body: { "email": "user@example.com", "otp": "123456" }
```
**Response:**
```
{
  "success": true,
  "message": "Login successful",
  "token": "...",
  "name": "...",
  "email": "..."
}
```

### Login with Password (unchanged)
```
POST /api/auth/login
Body: { "email": "user@example.com", "password": "yourpassword" }
```
**Response:**
```
{
  "success": true,
  "message": "Login successful",
  "token": "...",
  "name": "...",
  "email": "..."
}
```

## Notes API Endpoints

### Get All Notes
```
GET /api/notes
Headers: Authorization: Bearer <JWT_TOKEN>
```
**Response:**
```
{
  "success": true,
  "notes": [
    { "_id": "...", "content": "...", ... }
  ]
}
```

### Create a Note
```
POST /api/notes
Headers: Authorization: Bearer <JWT_TOKEN>
Body: { "content": "Your note here" }
```
**Response:**
```
{
  "success": true,
  "note": { "_id": "...", "content": "...", ... }
}
```

### Update a Note
```
PUT /api/notes/:id
Headers: Authorization: Bearer <JWT_TOKEN>
Body: { "content": "Updated note" }
```
**Response:**
```
{
  "success": true,
  "note": { "_id": "...", "content": "...", ... }
}
```

### Delete a Note
```
DELETE /api/notes/:id
Headers: Authorization: Bearer <JWT_TOKEN>
```
**Response:**
```
{
  "success": true,
  "message": "Note deleted"
}
```

## Example: Fetch Notes in React
```js
fetch('/api/notes', {
  headers: {
    'Authorization': 'Bearer ' + localStorage.getItem('token')
  }
})
  .then(res => res.json())
  .then(data => console.log(data));
```

## Notes
- Always include the JWT token in the `Authorization` header as `Bearer <token>` for protected routes.
- You can store the token in localStorage or cookies on the frontend.
- Adjust the API base URL as needed for your deployment.
